<%- model_class = Manual -%>
<div class="page-header">
  <h1><%=t '.title', :default => [:'helpers.titles.edit', 'Edit %{model}'], :model => model_class.model_name.human.titleize %></h1>
</div>


<style>
  .draggable:hover {
    cursor: move;
  }
    .removable:hover {
      cursor: pointer;
    }
</style>

<script>
    var app = angular.module('app', ['ui.sortable', 'ngResource']);

    app.factory('Manuals', function ($resource) {
        return $resource('/api/manuals', {}, {
            query: { method: 'GET', isArray: true },
            create: { method: 'POST' }
        })
    });

    app.factory('Manual', function ($resource) {
        return $resource('/api/manuals/:id', {}, {
            show: { method: 'GET' },
            update: { method: 'PUT', params: {id: '@id'} },
            delete: { method: 'DELETE', params: {id: '@id'} }
        })
    });

    app.factory('Steps', function ($resource) {
        return $resource('/api/steps', {}, {
            query: { method: 'GET', isArray: true },
            create: { method: 'POST' }
        })
    });

    app.factory('Step', function ($resource) {
        return $resource('/api/steps/:id', {}, {
            show: { method: 'GET' },
            update: { method: 'PUT', params: {id: '@id'} },
            delete: { method: 'DELETE', params: {id: '@id'} }
        })
    });

    //    app.factory('Manual', function($resource) {
//        return $resource('/api/manuals/:id', {id: '@id'});
//    });
//
//    function ManualFactory($resource) {
//        var Manual = $resource('/api/manuals/:id');
//        return Manual;
//    }
//
//    function StepFactory($resource) {
//        var Step = $resource('/api/steps/:id');
//        return Step;
//    }
//
//    app.factory('Manual', ManualFactory);
//    app.factory('Step', StepFactory);

    app.controller('ManualEditCtrl', ['$scope', 'Manual', 'Step', 'Steps', function ($scope, Manual, Step, Steps)
    {
        $scope.manual = Manual.get({id: <%= @manual.id%>});

        $scope.manual.$promise.then(function (result) {
            $scope.list = result.steps;
            $scope.form.data.text = result.name;
        });

        $scope.cl = function () {
            $scope.list.forEach(function (obj) {
                alert(JSON.stringify(obj));
            });
        };

        $scope.form = {
            state: {},
            data: {}
        };

        $scope.saveForm = function() {
            $scope.manual.name = $scope.form.data.text;
            Manual.update({ id: $scope.manual["id"] }, $scope.manual);
        };

//            [
//            { "id":1, "priority":1, "manual_id":1, "name": "Prepare" },
//            { "id":2, "priority":2, "manual_id":1, "name": "Cook" },
//            { "id":3, "priority":3, "manual_id":1, "name": "Finish" }
//        ];

//        $scope.list.push(Step.get({id: 1}));

        $scope.sortableOptions = {
            cursor: "move"//,
//            update: function (e, ui) {
//                var $list = ui.item.parent();
//                $scope.$apply(function () {
//                    $scope.currSort = $list.sortable("toArray")
//
//                })
//            }
        };

        $scope.syncOrder = function (elemPositions) {
            $scope.list.forEach(function (obj) {
                elemPositions.forEach(function (elemId, index) {
                    var id = parseInt(elemId.replace(/object-/, ''));
                    if (id === obj.id) {
                        obj.priority = index + 1;
                    }
                });
            });
            $scope.updateOrderBackend();
        };

        $scope.addStep = function(formData) {
            if (formData.name.length > 0)
            {
                var step = new Step();
                step.name = formData.name;
                step.priority = $scope.list.length + 1;
                step.manual_id = $scope.manual.id;
                Steps.create(step, function(response) {
                    Step.get({id: response.id}).$promise.then(function (result) {
                        $scope.list.push(result);
                    });
                });
            }
        };

        $scope.syncPositions = function (priority) {
            $scope.list.forEach(function(obj)
            {
                if (obj.priority > priority)
                {
                    alert(JSON.stringify(obj));
                    obj.priority -= 1;
                }
            });
        };

        $scope.deleteStep = function(item) {
            var index = $scope.list.indexOf(item);
            var priority = item.priority;
            Step.delete({id: $scope.list[index].id}, function () {
                $scope.list.splice(index, 1);
                $scope.syncPositions(priority);
                $scope.updateOrderBackend();
            });
        };

        $scope.updateOrderBackend = function () {
            $scope.list.forEach(function (obj) {
                Step.update({ id: obj.id }, obj, function (response) {});
            });
        }

//        $scope.updateOrder = function (element) {
//            $scope.syncOrder(element.sortable('toArray'));
////            $scope.syncPositions();
//        };
    }]);



    app.directive('sortable', function ($timeout) {
        return function ($scope, element, attributes) {
            element.sortable({
                stop : function(event, ui) {
                    $scope.$apply(function () {
//                        $scope.updateOrder(element);
                        $scope.syncOrder(element.sortable('toArray'));
                    });
//                    $scope.syncPositions();
                }
            });
        };
    });

    app.directive('autoSaveForm', function($timeout) {
        return {
            require: ['^form'],
            link: function($scope, $element, $attrs, $ctrls) {
                var $formCtrl = $ctrls[0];
                var savePromise = null;
                var expression = $attrs.autoSaveForm || 'true';
                $scope.$watch(function() {
                    if($formCtrl.$valid && $formCtrl.$dirty) {
                        if(savePromise) {
                            $timeout.cancel(savePromise);
                        }
                        savePromise = $timeout(function() {
                            savePromise = null;
                            if($formCtrl.$valid) {
                                if($scope.$eval(expression) !== false) {
                                    console.log('Form data persisted -- setting prestine flag');
                                    $formCtrl.$setPristine();
                                }
                            }
                        }, 500);
                    }
                });
            }
        };
    });
</script>

<div>
  <div ng-controller="ManualEditCtrl">


    <form name="form.state" auto-save-form="saveForm()">
      <div>Name:
        <input name="text" ng-model="form.data.text"/>
        <span ng-if="form.state.$dirty && form.state.$valid">Updating ...</span>
      </div>
    </form>

    <h2 style="text-align: center;">Steps</h2>

    <ul class="draggable" id="step-list" sortable>
      <li id="object-{{step.id}}" ng-repeat="step in list | orderBy:'priority'">
        <hr>
        <div class="portlet">
          <div  class="portlet-header" style="text-align: center;">
            <a href="/steps/{{step.id}}">Step {{step.priority}}: {{step.name}}</a>
            <span class="glyphicon glyphicon-remove removable" ng-click="deleteStep(step)" style="float: right;"></span>
          </div>
        </div>
        <hr>
      </li>
    </ul>
    <a ng-click="cl()">link</a>
    <form name="FormAdd" ng-submit="addStep(formData)">
      <input type="text" ng-model="formData.name" style="width:100%" placeholder="Add new step here">
      <input type="submit" class="btn btn-primary" style="width:100%" value="Add">
    </form>
  </div>
</div>